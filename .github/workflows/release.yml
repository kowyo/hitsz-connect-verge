name: build

on:
  push:
    branches: [ "main" ]
    tags:
      - "v*"

  pull_request:
    branches: [ "main" ]

jobs:
  update-version:
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    permissions: write-all
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        ref: main
    
    - name: Update version
      run: |
        TAG_VERSION="${{ github.ref_name }}"
        VERSION="${TAG_VERSION#v}"
        CURRENT_VERSION=$(cat .app-version)
        
        echo "Current version: $CURRENT_VERSION"
        echo "New version from tag: $VERSION"
        
        if [ "$CURRENT_VERSION" != "$VERSION" ]; then
          echo "Updating .app-version to $VERSION"
          echo "$VERSION" > .app-version
          
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          git add .app-version
          git commit -m "chore: bump version to $VERSION"
          git push origin HEAD:main
          echo "Version updated and committed"
        else
          echo "Version is already up to date, no changes needed"
        fi

  build:
    needs: [update-version]
    if: always() # Continue even if update-version was skipped or failed
    permissions: write-all
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            os_name: windows
            arch: amd64
          - os: windows-latest
            os_name: windows
            arch: arm64
          - os: macos-13
            os_name: darwin
            arch: amd64
            target_arch: x86_64
          - os: macos-latest
            os_name: darwin
            arch: arm64
            target_arch: arm64
          - os: ubuntu-latest
            os_name: linux
            arch: amd64
          - os: ubuntu-24.04-arm
            os_name: linux
            arch: arm64
            
    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version-file: ".python-version"

    - name: Install uv and restore cache
      uses: astral-sh/setup-uv@v5
      with:
        version: "0.6.0"
        enable-cache: true
        cache-dependency-glob: "**/pyproject.toml"

    - name: Install Dependencies
      run: uv sync

    # Download ZJU-connect core package
    - name: Download ZJU-connect Core
      run: |
        mkdir -p app/core
        curl -L "https://github.com/Mythologyli/zju-connect/releases/latest/download/zju-connect-${{ matrix.os_name }}-${{ matrix.arch }}.zip" -o app/core/zju-connect.zip
        if [ "${{ matrix.os_name }}" = "windows" ]; then
          powershell -command "Expand-Archive -Path app/core/zju-connect.zip -DestinationPath app/core"
        else
          unzip -o app/core/zju-connect.zip -d app/core
        fi
        rm app/core/zju-connect.zip
      shell: bash

    # macOS specific build
    - name: Build Executable (macOS)
      if: runner.os == 'macOS'
      run: |
        source .venv/bin/activate
        pyside6-rcc app/resources/resources.qrc -o app/common/resources.py
        pyinstaller --clean --windowed \
          --target-arch ${{ matrix.target_arch }} \
          --add-data "app:app" \
          --add-data ".app-version:." \
          --icon app/resources/icons/icon.icns \
          -n "HITSZ Connect Verge" app/main.py

    - name: Create DMG (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install create-dmg
        create-dmg \
          --volname "HITSZ Connect Verge" \
          --background "app/resources/installer/bg.svg" \
          --window-pos 400 200 \
          --window-size 660 400 \
          --icon-size 100 \
          --icon "HITSZ Connect Verge.app" 160 185 \
          --app-drop-link 500 185 \
          "dist/hitsz-connect-verge-${{ matrix.os_name }}-${{ matrix.arch }}.dmg" \
          "dist/HITSZ Connect Verge.app"

    # Windows specific build
    - name: Download UPX (Windows)
      if: runner.os == 'Windows'
      run: |
        mkdir -p upx
        Invoke-WebRequest -Uri "https://github.com/upx/upx/releases/download/v5.0.0/upx-5.0.0-win64.zip" -OutFile "upx.zip"
        Expand-Archive -Path "upx.zip" -DestinationPath "upx"
        Remove-Item -Path "upx.zip"
        
    - name: Build Executable (Windows)
      if: runner.os == 'Windows'
      run: |
        .\.venv\Scripts\Activate.ps1
        pyside6-rcc .\app\resources\resources.qrc -o .\app\common\resources.py
        
        pyinstaller --clean --noconsole `
          --add-data "app;app" `
          --add-data ".app-version;." `
          --icon "app\resources\icons\icon.ico" `
          --upx-dir "upx/upx-5.0.0-win64" `
          -n "HITSZ Connect Verge" app\main.py
        
        # Install Inno Setup
        choco install innosetup -y
        
        # Compile installer
        $version = Get-Content .app-version
        $setup_script = ".\setup.iss"
        iscc /DMyAppVersion="$version" `
             /DArchitecture="${{ matrix.arch }}" `
             $setup_script

    # Linux specific build
    - name: Cache apt packages
      if: runner.os == 'Linux'
      uses: awalsh128/cache-apt-pkgs-action@latest
      with:
        packages: libglib2.0-0 libgl1 dpkg-dev debhelper 
          libxcb-xinerama0 
          libxkbcommon-x11-0 
          libxcb-icccm4 
          libxcb-image0 
          libxcb-keysyms1 
          libxcb-randr0 
          libxcb-render-util0 
          libxcb-xfixes0 
          libxcb-shape0 
          libxcb-cursor0 
          libxcb-sync1 
          libxcb-xkb1 
          libxcb1
        version: 1.0

    - name: Download UPX (Linux)
      if: runner.os == 'Linux'
      run: |
        wget https://github.com/upx/upx/releases/download/v5.0.0/upx-5.0.0-${{ matrix.arch }}_linux.tar.xz
        tar -xf upx-5.0.0-${{ matrix.arch }}_linux.tar.xz
        rm upx-5.0.0-${{ matrix.arch }}_linux.tar.xz

    - name: Build Executable (Linux)
      if: runner.os == 'Linux'
      run: |
        source .venv/bin/activate
        pyside6-rcc app/resources/resources.qrc -o app/common/resources.py
        pyinstaller --noconsole --clean \
          --add-data "app:app" \
          --add-data ".app-version:." \
          --icon "app\resources\icons\icon.png" \
          --hidden-import shlex \
          --hidden-import requests \
          --hidden-import packaging \
          --upx-dir "upx-5.0.0-${{ matrix.arch }}_linux" \
          -n hitsz-connect-verge app/main.py

    - name: Create DEB Package (Linux)
      if: runner.os == 'Linux'
      run: |
        VERSION=$(cat .app-version)
        mkdir -p deb/DEBIAN
        mkdir -p deb/usr/bin
        mkdir -p deb/usr/share/applications
        mkdir -p deb/usr/share/icons/hicolor/256x256/apps
        mkdir -p deb/usr/lib/hitsz-connect-verge
        
        # Copy the entire distribution folder instead of just the binary
        cp -r dist/hitsz-connect-verge/* deb/usr/lib/hitsz-connect-verge/
        
        cat > deb/usr/bin/hitsz-connect-verge << EOF
        #!/bin/bash
        export PYTHONPATH=/usr/lib/hitsz-connect-verge
        export LD_LIBRARY_PATH=/usr/lib/hitsz-connect-verge:\$LD_LIBRARY_PATH
        cd /usr/lib/hitsz-connect-verge
        exec ./hitsz-connect-verge "\$@"
        EOF
        
        chmod +x deb/usr/bin/hitsz-connect-verge
        
        cp app/resources/icons/icon.png deb/usr/share/icons/hicolor/256x256/apps/hitsz-connect-verge.png
        
        cat > deb/usr/share/applications/hitsz-connect-verge.desktop << EOF
        [Desktop Entry]
        Name=HITSZ Connect Verge
        Exec=hitsz-connect-verge
        Icon=hitsz-connect-verge
        Type=Application
        Categories=Network;
        EOF
        
        cat > deb/DEBIAN/control << EOF
        Package: hitsz-connect-verge
        Version: $VERSION
        Section: net
        Priority: optional
        Architecture: ${{ matrix.arch == 'amd64' && 'amd64' || 'arm64' }}
        Maintainer: Kowyo
        Description: HITSZ Connect Verge
         A VPN client for ZJU Connect/EasyConnect users.
        Depends: libc6, libglib2.0-0, libgl1
        EOF
        
        dpkg-deb --build deb dist/hitsz-connect-verge-${{ matrix.os_name }}-${{ matrix.arch }}.deb

    # Upload artifacts common step
    - name: Archive Executable
      uses: actions/upload-artifact@v4
      with:
        name: hitsz-connect-verge-${{ matrix.os_name }}-${{ matrix.arch }}
        path: |
          ${{ runner.os == 'macOS' && 'dist/hitsz-connect-verge-*.dmg' || '' }}
          ${{ runner.os == 'Windows' && 'dist/hitsz-connect-verge-*-setup.exe' || '' }}
          ${{ runner.os == 'Linux' && 'dist/hitsz-connect-verge-*.deb' || '' }}
        if-no-files-found: error

  release:
    permissions: write-all
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest

    steps:
    - name: Download All Artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts

    - name: Prepare Release Files
      run: |
        mkdir -p release
        cp artifacts/*/*.dmg release/ 2>/dev/null || true
        cp artifacts/*/*.exe release/ 2>/dev/null || true
        cp artifacts/*/*.deb release/ 2>/dev/null || true

    - name: Publish Release
      uses: ncipollo/release-action@v1
      with:
        artifacts: "release/*"
        token: ${{ secrets.GITHUB_TOKEN }}
        tag: ${{ github.ref_name }}
        generateReleaseNotes: true
        prerelease: true